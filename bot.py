import telebot
from telebot import types
import database
from config import TOKEN
from math import cos, sin, asin, sqrt, radians, log

bot = telebot.TeleBot(TOKEN)

URL = "https://oleja1shpep.github.io/Telegram-Geoguesser/"

def calculate_score_and_distance(cords):
    cords = list(map(float, cords.split()))
    lon1 = cords[1]
    lat1 = cords[0]

    lon2 = cords[4]
    lat2 = cords[3]

    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    metres = 6371 * c * 1000
    score = max(min(-log(metres / 70, 1.0014) + 5000, 5000) ,0)
    return [int(score), int(metres)]

def create_start_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item_1 = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    markup.add(item_1)
    return markup

def create_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_1 = types.KeyboardButton("–û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
    item_2 = types.KeyboardButton("–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
    markup.add(item_1, item_2)
    return markup

def create_standard_single_game_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_1 = types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    item_2 = types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ ü§ì")
    item_3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item_1, item_2, item_3)
    return markup

def create_launch_standard_single_game_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_1 = types.KeyboardButton("–ó–∞–ø—É—Å–∫!", web_app = types.WebAppInfo(url=URL))
    markup.add(item_1)
    return markup

def get_top10():
    top_10_users = database.get_top10()
    txt = ''
    for i in range(len(top_10_users)):
        mean = 0 if top_10_users[i][2] == 0 else top_10_users[i][1] / top_10_users[i][2]
        txt += f'{i+1}. {top_10_users[i][0]} - –æ—á–∫–æ–≤ : {top_10_users[i][1]} | –º–∞—Ç—á–µ–π : {top_10_users[i][2]} | —Å—Ä–µ–¥–Ω–µ–µ : {round(mean,2)}\n'
    print(top_10_users)
    return txt

@bot.message_handler(commands=['start', 'reset'])
def hello_message(message):
    markup = create_start_markup()

    send = bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —è –≥–µ–æ–≥–µ—Å—Å—Ä –±–æ—Ç',reply_markup=markup)
    bot.register_next_step_handler(send, start_game)

def start_game(message):
    answer = message.text
    tele_id = message.from_user.id
    tele_username = message.from_user.username

    if answer == '–ò–≥—Ä–∞—Ç—å' or answer in ['–ú–µ–Ω—é', '–º–µ–Ω—é']:
        markup = create_menu_markup()

        if (database.search_tele_id(tele_id=tele_id, tele_username=tele_username)):
            send = bot.send_message(message.chat.id,"–†–∞–¥ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ!",reply_markup=markup)
        else:
            send = bot.send_message(message.chat.id,"–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",reply_markup=markup)
        
        bot.register_next_step_handler(send, menu)
        
    else:
        markup = create_start_markup()
        if answer in ['/start', '/reset']:
            send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —è –≥–µ–æ–≥–µ—Å—Å—Ä –±–æ—Ç', reply_markup=markup)
        else:
            send = bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞",reply_markup=markup)
        bot.register_next_step_handler(send, start_game)

def menu(message):
    answer = message.text
    if answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        print(f"—Ç–æ–ø, {message.from_user.id}, {message.from_user.username}")
        top_10_text = get_top10()
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, menu)

    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º":
        markup = create_standard_single_game_menu_markup()
        print(f"–æ–¥–∏–Ω–æ—á–Ω—ã–π, {message.from_user.id}, {message.from_user.username}")
        send = bot.send_message(message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º", reply_markup=markup)
        bot.register_next_step_handler(send, standard_single_game_menu)

    elif answer in ['/start', '/reset']:
        markup = create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —è –≥–µ–æ–≥–µ—Å—Å—Ä –±–æ—Ç',reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    else:
        markup = create_menu_markup()
        send = bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, menu)

def standard_single_game_menu(message):
    answer = message.text
    if answer == "–ù–∞–∑–∞–¥":
        markup = create_menu_markup()
        send = bot.send_message(message.chat.id,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        bot.register_next_step_handler(send, menu)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        print(answer, message.from_user.id, message.from_user.username)
        markup = create_standard_single_game_menu_markup()
        send = bot.send_message(message.chat.id,"–î–∞–µ—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç\n–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —É–ª–∏—Ü–∞–º –≤ –ª—é–±—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö", reply_markup=markup)
        bot.register_next_step_handler(send, standard_single_game_menu)
    elif answer == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        print(answer, message.from_user.id, message.from_user.username)
        markup = create_launch_standard_single_game_markup()
        send = bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    else:
        print(answer, message.from_user.id, message.from_user.username)
        markup = create_standard_single_game_menu_markup()
        send = bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, standard_single_game_menu)

@bot.message_handler(content_types=['web_app_data'])
def web_app_recieve(message):
    cords = message.web_app_data.data
    score, metres = calculate_score_and_distance(cords=cords)

    print(score, metres, message.from_user.username)
    database.add_results(message.from_user.id, score)

    markup = create_standard_single_game_menu_markup()
    send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
    bot.register_next_step_handler(send, standard_single_game_menu)

@bot.message_handler(content_types='text')
def message_reply(message):
    if message.text=="–¢—ã–∫" or  message.text=="—Ç—ã–∫":
        bot.send_message(message.chat.id,"–ó–∞—á–µ–º —Ç—ã–∫–Ω—É–ª??")
    elif (message.text).lower() == "amogus" or (message.text).lower() == "amongus":
        bot.send_message(message.chat.id,"when the imposter is sus")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /reset")
            

@bot.message_handler(content_types='dice')
def dice_reply(message):
    bot.send_message(message.chat.id, f'–í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ {message.dice.value}')

bot.polling(none_stop=True, interval=0)