import telebot
import database
from config import TOKEN_BOT
import bot_functions
from time import sleep
import markups
import messages
import datetime

bot = telebot.TeleBot(TOKEN_BOT)

@bot.message_handler(commands=['start', 'reset'], chat_types=['private'])
def hello_message(message):
    markup = markups.create_start_markup()

    send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
    bot.register_next_step_handler(send, start_game)

def start_game(message):
    answer = message.text
    tele_id = message.from_user.id
    tele_username = message.from_user.username

    if answer == '–ò–≥—Ä–∞—Ç—å':
        markup = markups.create_menu_markup()

        if (database.search_tele_id(tele_id=tele_id, tele_username=tele_username)):
            send = bot.send_message(message.chat.id, "–†–∞–¥ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ!", reply_markup=markup)
        else:
            send = bot.send_message(message.chat.id, "–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=markup)

        bot.register_next_step_handler(send, menu)

    else:
        markup = markups.create_start_markup()
        if answer in ['/start', '/reset']:
            send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        else:
            send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, start_game)

def menu(message):
    database.drop_duplicates()
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–†–µ–∂–∏–º—ã":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer == "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å ü§î":
        markup = markups.create_menu_markup()
        send = bot.send_message(message.chat.id, messages.HOW_TO_PLAY, reply_markup=markup)
        bot.register_next_step_handler(send, menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    else:
        markup = markups.create_menu_markup()
        send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, menu)

def gamemodes_menu(message):
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_menu_markup()
        send = bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        bot.register_next_step_handler(send, menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –ú–æ—Å–∫–≤–∞":
        markup = markups.create_single_game_menu_markup(mode="Moscow")
        send = bot.send_message(message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –ú–æ—Å–∫–≤–µ", reply_markup=markup)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
        markup = markups.create_single_game_menu_markup(mode="SPB")
        send = bot.send_message(message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É", reply_markup=markup)
        bot.register_next_step_handler(send, spb_single_game_menu)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –†–æ—Å—Å–∏—è":
        markup = markups.create_single_game_menu_markup(mode="Russia")
        send = bot.send_message(message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –†–æ—Å—Å–∏–∏", reply_markup=markup)
        bot.register_next_step_handler(send, russia_single_game_menu)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –ë–µ–ª–∞—Ä—É—Å—å":
        markup = markups.create_single_game_menu_markup(mode="Belarus")
        send = bot.send_message(message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏", reply_markup=markup)
        bot.register_next_step_handler(send, belarus_single_game_menu)
    else:
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)

def moscow_single_game_menu(message):
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        markup = markups.create_single_game_menu_markup(mode="Moscow")
        send = bot.send_message(message.chat.id, messages.MOSCOW_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        top_10_text = bot_functions.get_top10_single(mode="Moscow")
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    elif answer == "–ü—Ä–æ—à–ª—ã–µ 5 –∏–≥—Ä":
        last_5_games = bot_functions.get_last5_results_single(message.from_user.id, "Moscow")
        send = bot.send_message(message.chat.id, last_5_games)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    else:
        if (hasattr(message, 'web_app_data')):
            if message.web_app_data.data:
                print("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", message.from_user.id,
                      message.from_user.username)
                markup = markups.create_single_game_menu_markup(mode="Moscow")
                cords = message.web_app_data.data
                score, metres = bot_functions.calculate_score_and_distance_moscow_spb(cords=cords)
                photo_url = bot_functions.get_url(cords=cords)

                print(score, metres, message.from_user.username)
                database.add_results_moscow_single(message.from_user.id, score)
                database.add_game_moscow_single(tele_id=message.from_user.id, score=score, metres=metres)
                txt = bot_functions.create_result_text(score=score, metres=metres)
                send = bot.send_photo(message.chat.id, photo_url, caption=txt, reply_markup=markup)
                # send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {
                #                         metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                
                bot.register_next_step_handler(send, moscow_single_game_menu)
        else:
            markup = markups.create_single_game_menu_markup(mode="Moscow")
            send = bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(send, moscow_single_game_menu)

def spb_single_game_menu(message):
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        markup = markups.create_single_game_menu_markup(mode="SPB")
        send = bot.send_message( message.chat.id, messages.SPB_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, spb_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        top_10_text = bot_functions.get_top10_single(mode="SPB")
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, spb_single_game_menu)
    elif answer == "–ü—Ä–æ—à–ª—ã–µ 5 –∏–≥—Ä":
        last_5_games = bot_functions.get_last5_results_single(message.from_user.id, "SPB")
        send = bot.send_message(message.chat.id, last_5_games)
        bot.register_next_step_handler(send, spb_single_game_menu)
    else:
        if (hasattr(message, 'web_app_data')):
            if message.web_app_data.data:
                print("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", message.from_user.id,
                      message.from_user.username)
                markup = markups.create_single_game_menu_markup(mode="SPB")
                cords = message.web_app_data.data
                score, metres = bot_functions.calculate_score_and_distance_moscow_spb(cords=cords)
                photo_url = bot_functions.get_url(cords=cords)

                print(score, metres, message.from_user.username)
                database.add_results_spb_single(message.from_user.id, score)
                database.add_game_spb_single(tele_id=message.from_user.id, score=score, metres=metres)
                txt = bot_functions.create_result_text(score=score, metres=metres)
                send = bot.send_photo(message.chat.id, photo_url, caption=txt, reply_markup=markup)
                # send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {
                #                         metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                
                bot.register_next_step_handler(send, spb_single_game_menu)
        else:
            markup = markups.create_single_game_menu_markup(mode="SPB")
            send = bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(send, spb_single_game_menu)

def russia_single_game_menu(message):
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, { message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        markup = markups.create_single_game_menu_markup(mode="Russia")
        send = bot.send_message(message.chat.id, messages.RUSSIA_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, russia_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        top_10_text = bot_functions.get_top10_single(mode="Russia")
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, russia_single_game_menu)
    elif answer == "–ü—Ä–æ—à–ª—ã–µ 5 –∏–≥—Ä":
        last_5_games = bot_functions.get_last5_results_single(message.from_user.id, "Russia")
        send = bot.send_message(message.chat.id, last_5_games)
        bot.register_next_step_handler(send, russia_single_game_menu)
    else:
        if (hasattr(message, 'web_app_data')):
            if message.web_app_data.data:
                print("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", message.from_user.id,
                      message.from_user.username)
                markup = markups.create_single_game_menu_markup(mode="Russia")
                cords = message.web_app_data.data
                score, metres = bot_functions.calculate_score_and_distance_russia(cords=cords)
                photo_url = bot_functions.get_url(cords=cords)

                print(score, metres, message.from_user.username)
                database.add_results_russia_single(message.from_user.id, score)
                database.add_game_russia_single(tele_id=message.from_user.id, score=score, metres=metres)
                txt = bot_functions.create_result_text(score=score, metres=metres)
                send = bot.send_photo(message.chat.id, photo_url, caption=txt, reply_markup=markup)
                # send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {
                #                         metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                
                bot.register_next_step_handler(send, russia_single_game_menu)
        else:
            markup = markups.create_single_game_menu_markup(mode="Russia")
            send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(send, russia_single_game_menu)

def belarus_single_game_menu(message):
    answer = message.text
    print(f"{datetime.datetime.now()}, {answer}, {message.from_user.id}, {message.from_user.username}")
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, { message.from_user.first_name}' + messages.GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        markup = markups.create_single_game_menu_markup(mode="Belarus")
        send = bot.send_message(message.chat.id, messages.BELARUS_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, belarus_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        top_10_text = bot_functions.get_top10_single(mode="Belarus")
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, belarus_single_game_menu)
    elif answer == "–ü—Ä–æ—à–ª—ã–µ 5 –∏–≥—Ä":
        last_5_games = bot_functions.get_last5_results_single(message.from_user.id, "Belarus")
        send = bot.send_message(message.chat.id, last_5_games)
        bot.register_next_step_handler(send, belarus_single_game_menu)
    else:
        if (hasattr(message, 'web_app_data')):
            if message.web_app_data.data:
                print("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", message.from_user.id,
                      message.from_user.username)
                markup = markups.create_single_game_menu_markup(mode="Belarus")
                cords = message.web_app_data.data
                score, metres = bot_functions.calculate_score_and_distance_russia(cords=cords)
                photo_url = bot_functions.get_url(cords=cords)

                print(score, metres, message.from_user.username)
                database.add_results_belarus_single(message.from_user.id, score)
                database.add_game_belarus_single(tele_id=message.from_user.id, score=score, metres=metres)
                txt = bot_functions.create_result_text(score=score, metres=metres)
                send = bot.send_photo(message.chat.id, photo_url, caption=txt, reply_markup=markup)
                # send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {
                #                         metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                
                bot.register_next_step_handler(send, belarus_single_game_menu)
        else:
            markup = markups.create_single_game_menu_markup(mode="Belarus")
            send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(send, belarus_single_game_menu)

@bot.message_handler(content_types='text', chat_types=['private'])
def message_reply(message):
    if message.text == "–¢—ã–∫" or message.text == "—Ç—ã–∫":
        bot.send_message(message.chat.id, "–ó–∞—á–µ–º —Ç—ã–∫–Ω—É–ª??")
    elif (message.text).lower() == "amogus" or (message.text).lower() == "amongus":
        bot.send_message(message.chat.id, "when the imposter is sus")
    else:
        bot.send_message(
            message.chat.id, "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /reset")

@bot.message_handler(chat_types=["group", "supergroup", "channel"])
def message_reply_not_private(message):
    bot.send_message(message.chat.id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ")

while True:
    try:
        bot.polling(none_stop=True, timeout=500, long_polling_timeout=500)
    except Exception as e:
        print(datetime.datetime.now(), e)
        sleep(3)
