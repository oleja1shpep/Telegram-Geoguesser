import telebot
from telebot import types
import database
from config import TOKEN_BOT, TOKEN_STATIC
from math import cos, sin, asin, sqrt, radians, log
from time import sleep
import markups

MOSCOW_SINGLE_PLAYER_RULES = """
–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—ë –∑–Ω–∞–Ω–∏–µ –ú–æ—Å–∫–≤—ã!

–î–∞–µ—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç
–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —É–ª–∏—Ü–∞–º –≤ –ª—é–±—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""

WORLD_SINGLE_PLAYER_RULES = """
–ö–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –∑–Ω–∞–µ—à—å –º–∏—Ä?

–î–∞–µ—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç
–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —É–ª–∏—Ü–∞–º –≤ –ª—é–±—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""

HOW_TO_PLAY = """
- –í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –≤ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ –∫–∞—Ä—Ç–µ –º–∏—Ä–∞
- –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –Ω–∞ –ø–∞–Ω–æ—Ä–∞–º–µ –≤ –ª—é–±—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö

–í–∞—à–∞ –∑–∞–¥–∞—á–∞: –ø–æ –ø–∞–Ω–æ—Ä–∞–º–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –º–∏—Ä–∞, –ø–æ—Å—Ç–∞–≤–∏–≤ –º–µ—Ç–∫—É –Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è

"""

GREETING = """\n–Ø - –∞–Ω–∞–ª–æ–≥ –∏–≥—Ä—ã Geoguessr –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–µ –º–µ—Å—Ç –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º –∏ –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
"""

bot = telebot.TeleBot(TOKEN_BOT)


def get_url(cords):
    lat1, lon1, _, lat2, lon2 = map(float, cords.split())
    return f"https://static-maps.yandex.ru/v1?pl=c:8822DDC0,w:3,{lon1},{lat1},{lon2},{lat2}&pt={lon1},{lat1},flag~{lon2},{lat2},comma&apikey={TOKEN_STATIC}"


def calculate_score_and_distance(cords):
    lat1, lon1, _, lat2, lon2 = map(float, cords.split())

    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))
    metres = 6371 * c * 1000
    score = max(min(-log(metres / 70, 1.0014) + 5000, 5000), 0)
    return [int(score), int(metres)]


def get_top10_moscow_single():
    top_10_users = database.get_top10_moscow_single()
    txt = ''
    for i in range(len(top_10_users)):

        txt += f'{i+1}. {top_10_users[i][0]} - —Å—Ä–µ–¥–Ω–µ–µ : {
            top_10_users[i][3]} | –º–∞—Ç—á–µ–π : {top_10_users[i][2]}\n'
    print(top_10_users)
    return txt


def get_top10_world_single():
    top_10_users = database.get_top10_world_single()
    txt = ''
    for i in range(len(top_10_users)):

        txt += f'{i+1}. {top_10_users[i][0]} - —Å—Ä–µ–¥–Ω–µ–µ : {
            top_10_users[i][3]} | –º–∞—Ç—á–µ–π : {top_10_users[i][2]}\n'
    print(top_10_users)
    return txt


@bot.message_handler(commands=['start', 'reset'])
def hello_message(message):
    markup = markups.create_start_markup()

    send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                            message.from_user.first_name}' + GREETING, reply_markup=markup)
    bot.register_next_step_handler(send, start_game)


def start_game(message):
    answer = message.text
    tele_id = message.from_user.id
    tele_username = message.from_user.username

    if answer == '–ò–≥—Ä–∞—Ç—å':
        markup = markups.create_menu_markup()

        if (database.search_tele_id(tele_id=tele_id, tele_username=tele_username)):
            send = bot.send_message(
                message.chat.id, "–†–∞–¥ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ!", reply_markup=markup)
        else:
            send = bot.send_message(
                message.chat.id, "–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=markup)

        bot.register_next_step_handler(send, menu)

    else:
        markup = markups.create_start_markup()
        if answer in ['/start', '/reset']:
            send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                                    message.from_user.first_name}' + GREETING, reply_markup=markup)
        else:
            send = bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, start_game)


def menu(message):
    database.drop_duplicates()
    answer = message.text
    if answer == "–†–µ–∂–∏–º—ã":
        markup = markups.create_gamemodes_markup()
        print(f"—Ä–µ–∂–∏–º—ã, {message.from_user.id}, {message.from_user.username}")
        send = bot.send_message(
            message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer == "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å ü§î":
        markup = markups.create_menu_markup()
        send = bot.send_message(
            message.chat.id, HOW_TO_PLAY, reply_markup=markup)
        bot.register_next_step_handler(send, menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                                message.from_user.first_name}' + GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    else:
        markup = markups.create_menu_markup()
        send = bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, menu)


def gamemodes_menu(message):
    answer = message.text
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_menu_markup()
        send = bot.send_message(
            message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        bot.register_next_step_handler(send, menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                                message.from_user.first_name}' + GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –ú–æ—Å–∫–≤–∞":
        markup = markups.create_moscow_single_game_menu_markup()
        print(f"–æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, –ø–æ –º–æ—Å–∫–≤–µ, {
              message.from_user.id}, {message.from_user.username}")
        send = bot.send_message(
            message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –ú–æ—Å–∫–≤–µ", reply_markup=markup)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    elif answer == "–û–¥–∏–Ω–æ—á–Ω—ã–π | –ú–∏—Ä":
        markup = markups.create_world_single_game_menu_markup()
        send = bot.send_message(
            message.chat.id, "–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ –ú–∏—Ä—É", reply_markup=markup)
        bot.register_next_step_handler(send, world_single_game_menu)
    else:
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)


def moscow_single_game_menu(message):
    answer = message.text
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(
            message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                                message.from_user.first_name}' + GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        print(answer, message.from_user.id, message.from_user.username)
        markup = markups.create_moscow_single_game_menu_markup()
        send = bot.send_message(
            message.chat.id, MOSCOW_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        print(f"—Ç–æ–ø, {message.from_user.id}, {message.from_user.username}")
        top_10_text = get_top10_moscow_single()
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, moscow_single_game_menu)
    else:
        if (hasattr(message, 'web_app_data')):
            if message.web_app_data.data:
                print("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", message.from_user.id,
                      message.from_user.username)
                markup = markups.create_moscow_single_game_menu_markup()
                cords = message.web_app_data.data
                score, metres = calculate_score_and_distance(cords=cords)
                photo_url = get_url(cords=cords)

                print(score, metres, message.from_user.username)
                database.add_results_moscow_single(message.from_user.id, score)
                send = bot.send_photo(message.chat.id, photo_url, caption=f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                # send = bot.send_message(message.chat.id, f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –æ—á–∫–æ–≤\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {
                #                         metres} –º–µ—Ç—Ä–æ–≤", reply_markup=markup)
                
                bot.register_next_step_handler(send, moscow_single_game_menu)
        else:
            print(answer, message.from_user.id, message.from_user.username)
            markup = markups.create_moscow_single_game_menu_markup()
            send = bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
            bot.register_next_step_handler(send, moscow_single_game_menu)


def world_single_game_menu(message):
    answer = message.text
    if answer == "–ù–∞–∑–∞–¥":
        markup = markups.create_gamemodes_markup()
        send = bot.send_message(
            message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã", reply_markup=markup)
        bot.register_next_step_handler(send, gamemodes_menu)
    elif answer in ['/start', '/reset']:
        markup = markups.create_start_markup()
        send = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {
                                message.from_user.first_name}' + GREETING, reply_markup=markup)
        bot.register_next_step_handler(send, start_game)
    elif answer == "–ü—Ä–∞–≤–∏–ª–∞ ü§ì":
        print(answer, message.from_user.id, message.from_user.username)
        markup = markups.create_world_single_game_menu_markup()
        send = bot.send_message(
            message.chat.id, WORLD_SINGLE_PLAYER_RULES, reply_markup=markup)
        bot.register_next_step_handler(send, world_single_game_menu)
    elif answer == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        print(f"—Ç–æ–ø, {message.from_user.id}, {message.from_user.username}")
        top_10_text = get_top10_world_single()
        send = bot.send_message(message.chat.id, top_10_text)
        bot.register_next_step_handler(send, world_single_game_menu)
    elif answer == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        print(answer, message.from_user.id, message.from_user.username)
        markup = markups.create_world_single_game_menu_markup()
        send = bot.send_message(
            message.chat.id, "Work in progress...", reply_markup=markup)
        bot.register_next_step_handler(send, world_single_game_menu)
    else:
        print(answer, message.from_user.id, message.from_user.username)
        markup = markups.create_world_single_game_menu_markup()
        send = bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
        bot.register_next_step_handler(send, world_single_game_menu)


@bot.message_handler(content_types='text')
def message_reply(message):
    if message.text == "–¢—ã–∫" or message.text == "—Ç—ã–∫":
        bot.send_message(message.chat.id, "–ó–∞—á–µ–º —Ç—ã–∫–Ω—É–ª??")
    elif (message.text).lower() == "amogus" or (message.text).lower() == "amongus":
        bot.send_message(message.chat.id, "when the imposter is sus")
    else:
        bot.send_message(
            message.chat.id, "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /reset")


@bot.message_handler(content_types='dice')
def dice_reply(message):
    bot.send_message(message.chat.id, f'–í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ {message.dice.value}')

bot.polling(none_stop=True, interval=0)

# while True:
#     try:
#         bot.polling(none_stop=True, interval=0)
#     except Exception as e:
#         print(e)
#         sleep(3)
